// Code generated by go2go; DO NOT EDIT.


//line stream_test.go2:1
package stream

//line stream_test.go2:1
import (
//line stream_test.go2:1
 "errors"
//line stream_test.go2:1
 "sort"
//line stream_test.go2:1
 "sync"
//line stream_test.go2:1
 "testing"
//line stream_test.go2:1
)

//line stream_test.go2:7
func TestStreamAPI(t *testing.T) {
	ints := []int{1, 2, 3, 4, 5}
	s := instantiate୦୦Of୦int(ints)

	if s == nil {
		t.Fail()
	}

	anyMatch := s.AnyMatch(func(e int) bool {
		return e == 3
	})

	if !anyMatch {
		t.Fatal("AnyMatch failed")
	}

	res, _ := s.FindAny(func(e int) bool {
		return e == 4
	})

	if res == 0 {
		t.Fatal("FindAny failed")
	}

	allMatch := s.AllMatch(func(e int) bool {
		return e > 0
	})
	if !allMatch {
		t.Fatal("AllMatch failed")
	}

	ns := s.ConcatArray([]int{1, 2, 3})

	if ns.Count() != 8 {
		t.Fatal("ConCatArray Failed")
	}

	ds := s.Distinct(func(e1, e2 int) int {
		return e1 - e2
	})

	if ds.Count() != 5 {
		t.Fatal("Distinct Failed")
	}

	ns = s.Filter(func(e int) bool {
		return e < 4
	})

	if ns.Count() != 3 {
		t.Fatal("filter failed")
	}

	s = instantiate୦୦Of୦int(ints)

	max, _ := s.Max(func(e1, e2 int) int {
		return e1 - e2
	})

	if max != 5 {
		t.Fatal("Max failed")
	}
	min, _ := s.Min(func(e1, e2 int) int {
		return e1 - e2
	})

	if min != 1 {
		t.Fatal("Min failed")
	}
}

//line stream_test.go2:76
var _ = errors.As

//line stream_test.go2:76
type _ sort.Float64Slice
//line stream_test.go2:76
type _ sync.Cond

//line stream_test.go2:76
var _ = testing.AllocsPerRun
