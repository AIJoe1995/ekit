package collection

import (
	"reflect"
	"testing"
)

func TestStack(t *testing.T) {
	//1. 新建一个队列
	s := InitStack[int]()

	//2. 向队列加入元素
	s.Push(100)
	s.Push(79)
	s.Push(38)

	//判断长度是否为3
	if s.Len() != 3 {
		t.Fatalf("unexpected length of queue.")
	}

	if !reflect.DeepEqual(s.Traverse(), []int{100, 79, 38}) {
		t.Fatalf("unexpected Traverse!")
	}

	if s.Peek() != 38 {
		t.Fatalf("unexpected top of stack.")
	}

	//弹出元素
	val := s.Pop()
	if val != 38 {
		t.Fatalf("unexpected value.")
	}

	val = s.Pop()
	if val != 79 {
		t.Fatalf("unexpected value.")
	}

	if s.Len() != 1 {
		t.Fatalf("unexpected length of queue.")
	}

	if s.Peek() != 100 {
		t.Fatalf("unexpected top of stack.")
	}

	//清空元素
	s.Clear()
	if !s.Empty() {
		t.Fatalf("expected empty.")
	}
}

