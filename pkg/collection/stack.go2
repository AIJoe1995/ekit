package collection


type Stack[E any] struct {
	l *LinkedList[E]
}

func InitStack[E any]() *Stack[E] {
	return &Stack[E]{
		l: InitLinkedList[E](),
	}
}

func (s *Stack[E]) Len() int {
	return s.l.len
}

func (s *Stack[E]) Empty() bool {
	return s.l.len == 0
}

//remove all elements of stack
func (s *Stack[E]) Clear() {
	s.l.Clear()
}

func (s *Stack[E]) Traverse() []E {
	ret := []E{}
	cur := s.l.head.Next
	for i := 0; i < s.l.Len(); i++ {
		ret = append(ret, cur.Val)
		cur = cur.Next
	}
	return ret
}

//return the value at the top of stack
//if stack is empty, return the default value of the corresponding generic
func (s *Stack[E]) Peek() E {
	return s.l.Back()
}

//Add the given value to the top of the stack
func (s *Stack[E]) Push(val E) {
	s.l.Append(val)
}

//remove and return the value at the top of stack
//if stack is empty, return the default value of the corresponding generic
func (s *Stack[E]) Pop() E {
	val := s.l.Back()
	s.l.Remove(-1)
	return val
}