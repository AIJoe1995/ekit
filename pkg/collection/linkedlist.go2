package collection

//node of linkedlist
type LinkedListNode[E any] struct {
	Val        E
	Prev, Next *LinkedListNode[E]
}

//linkedlist is a circular doubly linked list
//linkedlist has two dummy nodes, one is head dummyNode, the other is tail dummyNode
type LinkedList[E any] struct {
	//一个头节点一个尾节点
	head, tail *LinkedListNode[E]
	//length of linkedlist
	len int
}

func InitLinkedList[E any]() *LinkedList[E] {
	h, t := &LinkedListNode[E]{}, &LinkedListNode[E]{}
	h.Prev, h.Next, t.Prev, t.Next = t, t, h, h
	return &LinkedList[E]{
		h,
		t,
		0,
	}
}

func (l *LinkedList[E]) Len() int {
	return l.len
}

func (l *LinkedList[E]) Empty() bool {
	return l.len == 0
}

func (l *LinkedList[E]) Clear() {
	l.len = 0
	l.head.Next, l.head.Prev, l.tail.Prev, l.tail.Next = l.tail, l.tail, l.head, l.head
}

func (l *LinkedList[E]) Traverse() []E {
	ret := make([]E, l.len)
	cur := l.head.Next
	for i := 0; i < l.Len(); i++ {
		ret[i], cur = cur.Val, cur.Next
	}
	return ret
}

//add a linkedlist node to the given index
//note: won't do anything if the index is illegal
//If the index is a non-negative number, the index is [0, l.len],
//which means that the value is added to the position where the index is index
//If the index is a negative number, the index is [-1,-l.len-1],
//-index means the I-th node from the tail
//for example, -1 means the prev node of the dummy tail node.
func (l *LinkedList[E]) Add(val E, index int) {
	//check if index is illegal
	if index > l.len || index < -l.len-1 {
		return
	}

	if index >= 0 {
		l.addFromFirst(val, index)
	} else {
		l.addFromLast(val, -index)
	}

	l.len++
}

func (l *LinkedList[E]) addFromFirst(val E, index int) {
	cur := l.head
	for i := 0; i < index; i++ {
		cur = cur.Next
	}
	node := &LinkedListNode[E]{
		Val: val,
	}
	node.Prev, node.Next, cur.Next, cur.Next.Prev = cur, cur.Next, node, node
}

func (l *LinkedList[E]) addFromLast(val E, index int) {
	cur := l.tail
	for i := 0; i < index; i++ {
		cur = cur.Prev
	}
	node := &LinkedListNode[E]{
		Val: val,
	}
	node.Prev, node.Next, cur.Next, cur.Next.Prev = cur, cur.Next, node, node
}

//set the value of a given index
//note: won't do anything if the index is illegal
//If the index is a non-negative number, the index is [0, l.len-1],
//which means that the value is added to the position where the index is index
//If the index is a negative number, the index is [-1,-l.len],
//-index means the I-th node from the tail
//for example, -1 means the prev node of the dummy tail node.
func (l *LinkedList[E]) Set(val E, index int) {
	//check if index is illegal
	if l.Empty() || index >= l.len || index <= -l.len-1 {
		return
	}

	if index >= 0 {
		l.setFromFirst(val, index)
	} else {
		l.setFromLast(val, -index)
	}
}

func (l *LinkedList[E]) setFromFirst(val E, index int) {
	cur := l.head
	for i := 0; i < index; i++ {
		cur = cur.Next
	}
	cur.Next.Val = val
}

func (l *LinkedList[E]) setFromLast(val E, index int) {
	cur := l.tail
	for i := 0; i < index-1; i++ {
		cur = cur.Prev
	}
	cur.Prev.Val = val
}

//remove the value of a given index
//note: won't do anything if the index is illegal
//If the index is a non-negative number, the index is [0, l.len-1],
//which means that the value is added to the position where the index is index
//If the index is a negative number, the index is [-1,-l.len],
//-index means the I-th node from the tail
//for example, -1 means the prev node of the dummy tail node.
func (l *LinkedList[E]) Remove(index int) {
	//check if index is illegal
	if l.Empty() || index >= l.len || index <= -l.len-1 {
		return
	}
	if index < 0 {
		l.removeFromLast(-index)
	} else {
		l.removeFromFirst(index)
	}
	l.len--
}

func (l *LinkedList[E]) removeFromLast(index int) {
	cur := l.tail
	for i := 0; i < index; i++ {
		cur = cur.Prev
	}
	cur.Prev, cur.Next, cur.Prev.Next, cur.Next.Prev = nil, nil, cur.Next, cur.Prev
}

func (l *LinkedList[E]) removeFromFirst(index int) {
	cur := l.head
	for i := 0; i < index+1; i++ {
		cur = cur.Next
	}
	cur.Prev, cur.Next, cur.Prev.Next, cur.Next.Prev = nil, nil, cur.Next, cur.Prev
}

//Add an element to the end of the linkedlist with the given value
func (l *LinkedList[E]) Append(val E) {
	node := &LinkedListNode[E]{Val: val}
	l.tail.Prev.Next, l.tail.Prev, node.Prev, node.Next = node, node, l.tail.Prev, l.tail
	l.len++
}

//return the value of the first node of the linkedlist
//if linkedlist is empty, return the default value of the corresponding generic
func (l *LinkedList[E]) Front() (e E) {
	if !l.Empty() {
		return l.head.Next.Val
	}
	return
}

//return the value of the last node of the linkedlist
//if linkedlist is empty, return the default value of the corresponding generic
func (l *LinkedList[E]) Back() (e E) {
	if !l.Empty() {
		return l.tail.Prev.Val
	}
	return
}
